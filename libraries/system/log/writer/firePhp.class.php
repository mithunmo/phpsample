<?php
/**
 * systemLogWriterFirePhp class
 * 
 * @author Dave Redfern
 * @copyright Dave Redfern (c) 2007-2010
 * @package scorpio
 * @subpackage system
 * @category systemLogWriterFirePhp
 * @version $Rev: 650 $
 */


/**
 * systemLogWriterFirePhp Class
 * 
 * Writes log messages to FirePHP via the FirePHPCore class. Useful only really
 * for Ajax logging as it requires output buffering to send the headers which may
 * or may not break the template engine in use at the time. Testing with Smarty
 * has seen no major issues.
 * 
 * This is a very basic wrapper that simply passes out the log message previously
 * generated by systemLog::log(). As this does not allow objects to be passed
 * explicitly, there seemed little need to support table, dump etc of FirePHP.
 * 
 * These could be added by modifing the systemLog; but as ajax requests can be
 * logged out to the text logger anyway, there appears to be little benefit in
 * adding this support.
 * 
 * To use, add the writer like any other specifying a filter mask for what should
 * be reported. As this log information could potentially contain SQL queries
 * e.g. DEBUG logLevel automatically outputs queries; FirePhp writer should NOT
 * be used on production systems.
 * 
 * In fact if the system is in production mode, it will be disabled silently.
 * 
 * @package scorpio
 * @subpackage system
 * @category systemLogWriterFirePhp
 */
class systemLogWriterFirePhp extends systemLogWriter {
	
	/**
	 * @see systemLogWriter::__construct()
	 * 
	 * @param systemLogFilter $inLogFilter
	 * @return systemLogWriter
	 */
	function __construct($inLogFilter) {
		parent::__construct('firephp', $inLogFilter);
		
		if ( headers_sent($filename, $linenum) ) {
			throw new systemLogException("Headers already sent in file ($filename) at line ($linenum), unable to create FirePHP logger");
		} else {
			ob_start();
		}
	}
	
	
	
	/**
	 * Main Methods
	 */
	
	/**
	 * @see systemLogWriter::_put()
	 */
	protected function _put($inMessage, $inSource) {
		if ( !system::getConfig()->isProduction() ) {
			/*
			 * Remove any carriage returns (ascii 13)
			 */
			$inMessage = preg_replace("/\r/", '', $inMessage);
			
			/*
			 * Send to FirePHP
			 */
			$oFirePhp = FirePHP::getInstance(true);
			if ( $inSource ) {
				$oFirePhp->fb($inSource.' '.$inMessage, $this->translateLogLevel());
			} else {
				$oFirePhp->fb($inMessage, $this->translateLogLevel());
			}
		}
	}
	
	/**
	 * Converts the internal log level to a fire bug log level
	 *
	 * @return string
	 */
	protected function translateLogLevel() {
		switch ( $this->getLastLogLevel() ) {
			case systemLogLevel::CRITICAL:
			case systemLogLevel::ERROR:
				return FirePHP::ERROR;
				
			case systemLogLevel::WARNING:
			case systemLogLevel::NOTICE:
				return FirePHP::WARN;

			case systemLogLevel::INFO:
				return FirePHP::INFO;
			
			default:
				return FirePHP::LOG;
		}
	}
}